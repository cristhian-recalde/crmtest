package com.trilogy.app.crm.bean.paymentgatewayintegration;

import java.util.Date;
import com.trilogy.app.crm.bas.directDebit.EnhancedParallVisitor;
import com.trilogy.app.crm.bean.DDOutboundFileTrackStateEnum;
import com.trilogy.app.crm.bean.GeneralConfig;
import com.trilogy.app.crm.bean.TopUpSchedule;
import com.trilogy.app.crm.bean.TopUpScheduleHome;
import com.trilogy.app.crm.support.CalendarSupportHelper;
import com.trilogy.app.crm.support.HomeSupportHelper;
import com.trilogy.framework.core.cron.TaskHelper;
import com.trilogy.framework.xhome.context.AgentException;
import com.trilogy.framework.xhome.context.Context;
import com.trilogy.framework.xhome.context.ContextAgent;
import com.trilogy.framework.xhome.elang.EQ;
import com.trilogy.framework.xhome.home.Home;
import com.trilogy.framework.xhome.home.HomeException;
import com.trilogy.framework.xlog.log.LogSupport;
import com.trilogy.framework.xhome.elang.LTE;
import com.trilogy.framework.xhome.elang.GT;
import com.trilogy.framework.xhome.elang.And;
import com.trilogy.app.crm.bean.SubscriberTypeEnum;
import com.trilogy.app.crm.bean.TopUpScheduleXInfo;
import com.trilogy.app.crm.agent.CronConstant;
import com.trilogy.framework.core.cron.TaskEntry;
import com.trilogy.framework.core.cron.TaskHelper;
import com.trilogy.app.crm.bean.DDOutboundFileTrack;


/**
 * 
 * Postpaid Recurring Credit Card Top Up Agent.
 * This Agent would read TOPSCHEDULE table for Postpaid Account and populate it to flat file. 
 * 
 * @author <a href='mailto:sajid.memon@redknee.com'>Sajid Memon</a>
 *
 */
public class PostpaidRecurringCreditCardTopUpAgent implements ContextAgent
{

	@Override
	public void execute(Context ctx) throws AgentException 
	{
	
		TaskEntry task = TaskHelper.retrieve(ctx, CronConstant.POSTPAID_RECURRING_CREDIT_CARD_TOP_UP_AGENT_NAME);
		if(task != null)
		{
			path = task.getParam0();
			bankCode = task.getParam1();
			if (path != null && path.trim().length() == 0)
			{
				String errorMsg = "Failed to run Postpaid Recurring Credit Card TopUp Agent, path is either null or empty : path : [" + path + "], Please specify path to store Direct Debit Outbound File in Parameter #1 field of Task.";
				LogSupport.minor(ctx, this, errorMsg);
				throw new AgentException(errorMsg);
				
			}
		}
		
		GeneralConfig config = (GeneralConfig) ctx.get(GeneralConfig.class); 
        int threadCount = 5; 
        
        if (config != null)
        {
        	threadCount = config.getDDROutBoundThreads();
        }
		
        final Home home = (Home) ctx.get(TopUpScheduleHome.class);
        
        Date today = CalendarSupportHelper.get(ctx).getDateWithNoTimeOfDay(new Date());
        
		And and = new And(); 
        
		and.add(new LTE(TopUpScheduleXInfo.NEXT_APPLICATION, today));
		and.add(new EQ(TopUpScheduleXInfo.SYSTEM_TYPE, SubscriberTypeEnum.POSTPAID));
		and.add(new GT(TopUpScheduleXInfo.AMOUNT, Long.valueOf(0l)));
		
		AdmerisDirectDebitOutputWriter writer = new AdmerisDirectDebitOutputWriter();
		
		try
		{
			writer.init(ctx, path, bankCode, extension);
		
			EnhancedParallVisitor visitor = new EnhancedParallVisitor(threadCount, new PostpaidTopUpScheduleOutputVisitor(writer)); 
			try
	        {
	            home.where(ctx, and).forEach(ctx, visitor);
	        }
	        catch (final HomeException e)
	        {
	        	LogSupport.minor(ctx, this, "Failure on visiting Postpaid Recurring Credit Card Top Up Schedule.", e);
	        }
	        finally
	        {
	        	 try
	             {
	        		 visitor.shutdown(EnhancedParallVisitor.TIME_OUT_FOR_SHUTTING_DOWN);
	             }
	             catch (final Exception e)
	             {
	                 LogSupport.minor(ctx, this, "Exception caught during wait for completion of all Postpaid Recurring Credit Card Top Up Threads", e);
	             }
	        }
	        
		}
		catch (Exception e)
		{
			String errorMessage = "Failed to initialized Direct Debit writer for Postpaid Recurring Credit Card Top Up.";
			LogSupport.major(ctx, this, errorMessage, e);
			throw new AgentException(errorMessage + e.getLocalizedMessage());
		}
		finally
		{
			writer.close();
		}
        
        DDOutboundFileTrack ddOutboundFileTrack = new DDOutboundFileTrack();
        ddOutboundFileTrack.setPath(path);
        ddOutboundFileTrack.setFileName(writer.getAutoGeneratedFileName().trim() + "." + extension);
        ddOutboundFileTrack.setGenerationDate(today);
        ddOutboundFileTrack.setState(DDOutboundFileTrackStateEnum.UNPROCESSED);
        
        try
        {
        	HomeSupportHelper.get(ctx).createBean(ctx, ddOutboundFileTrack);
        }
        catch (HomeException e)
        {
			String errorMessage = "Failed to store Direct Debit Outbound File entry in DDOutboundFileTrack Table";
        	LogSupport.major(ctx, this, errorMessage, e);
        	throw new AgentException(errorMessage + e.getLocalizedMessage());
        }
        
	}

	private String path = "";
	private String bankCode = "";
	private String extension ="PMT";
	
}
