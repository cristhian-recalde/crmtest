package com.trilogy.app.crm.bean.paymentgatewayintegration;

import java.io.File;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Calendar;
import java.util.Formatter;
import java.util.Date;
import com.trilogy.app.crm.bean.CreditCardToken;
import com.trilogy.app.crm.bean.CreditCardTokenXInfo;
import com.trilogy.app.crm.bean.CurrencyPrecision;
import com.trilogy.app.crm.bean.SubscriberStateEnum;
import com.trilogy.app.crm.bean.TopUpSchedule;
import com.trilogy.app.crm.bean.Account;
import com.trilogy.app.crm.bean.IdentifierEnum;
import com.trilogy.app.crm.bean.AccountStateEnum;
import com.trilogy.app.crm.support.AccountSupport;
import com.trilogy.app.crm.support.HomeSupportHelper;
import com.trilogy.app.crm.support.IdentifierSequenceSupportHelper;
import com.trilogy.framework.xhome.context.Context;
import com.trilogy.framework.xhome.context.ContextLocator;
import com.trilogy.framework.xhome.elang.EQ;
import com.trilogy.framework.xhome.home.HomeException;
import com.trilogy.framework.xlog.log.LogSupport;

public class AdmerisDirectDebitOutputWriter 
{

	public AdmerisDirectDebitOutputWriter()
	{
		
	}
	
	synchronized public void init(Context ctx, String path, String bankCode, String extension)  
	throws Exception
	{
		if (this.output == null )
		{	
			this.precision_ = (CurrencyPrecision) ctx.get(CurrencyPrecision.class);
			this.lineCount = 0;
			this.totalAmount = 0;
			this.outDirectory = path; 
			this.bankCode = bankCode; 
			this.fileName  = getFileName(ctx).trim();
			this.extension = extension; 
			final File file = new File(path);
			if (!file.exists())
			{
				file.mkdirs();
			}
			this.output = new PrintWriter(new File(path + File.separator + this.fileName  + "." + extension)); 
			this.outputHeader();
		}	
	}
	
	private String getFileName(Context ctx)
	throws HomeException
	{
		this.fileID = this.getFileSequence(ctx);
        Formatter fmt = new Formatter(); 
        fmt.format("%5s%05d", this.bankCode, this.fileID);
        autoGeneratedFileName = fmt.toString();
        return autoGeneratedFileName;
	}
	
	synchronized public String getAutoGeneratedFileName()
	{
		return autoGeneratedFileName;
	}
	
	synchronized public void close() 
	{
		if (output != null)
		{	
			this.outputFooter();
			output.flush(); 
			output.close();
			output = null; 
		}	
	}

	
	synchronized private void outputFooter() 
	{
        if (precision_ == null)
        {
            Context ctx = ContextLocator.locate();
            if (ctx == null || !ctx.has(CurrencyPrecision.class))
            {
                String msg = "Cannot find currency precision object in the context.";
                throw new RuntimeException(msg);
            }
            else
            {
                precision_ = (CurrencyPrecision) ctx.get(CurrencyPrecision.class);
            }
        }

        double amount = (double) BigDecimal.valueOf(totalAmount, precision_.getStoragePrecision()).setScale(precision_.getDisplayPrecision(), RoundingMode.HALF_EVEN).doubleValue(); 
		output.printf(TRIAL_FORMAT, lineCount, amount); 
	}

	
	synchronized private void outputHeader() 
	{
		Calendar cal = Calendar.getInstance();
	    
		output.printf(HEADER_FORMAT, bankCode, this.fileID, cal, cal, cal, cal, cal); 

	}

	public void printLine(Context ctx, TopUpSchedule topUpSchedule)
	{
		if (output == null )
		{
			LogSupport.major(ctx, this, "AdmerisDirectDebitOuputWriter is found to be null.");
			return; 
		}
		
		CurrencyPrecision precision = (CurrencyPrecision) ctx.get(CurrencyPrecision.class);
        if (precision == null)
        {
            LogSupport.minor(ctx, this, "Cannot find currency precision object in the context.");
            return;
        }

        synchronized (this.output)
		{
			
			CreditCardToken token = null;
			
			try
			{
				token = HomeSupportHelper.get(ctx).findBean(ctx, CreditCardToken.class, new EQ(CreditCardTokenXInfo.BAN, topUpSchedule.getBan()));
			}
			catch (HomeException e)
			{
				LogSupport.minor(ctx, this, "Fail to retrive token for BAN : [" + topUpSchedule.getBan() + "] from CreditCardToken table", e);
				return;
			}
			if (token == null)
			{
				LogSupport.minor(ctx, this, "Token for BAN : [" + topUpSchedule.getBan() + "], does not exists in the system.");
				return;
			}
			
			Account account = null;
			
			try
			{
				account = AccountSupport.getAccount(ctx, topUpSchedule.getBan());
			}
			catch (HomeException e)
			{
				LogSupport.minor(ctx, this, "Fail to retrive Account for BAN : [" + topUpSchedule.getBan() + "] from the system.",e);
				return;
			}
			if (account != null)
			{
				if (AccountStateEnum.ACTIVE.equals(account.getState()) || AccountStateEnum.SUSPENDED.equals(account.getState()) 
						|| AccountStateEnum.NON_PAYMENT_SUSPENDED.equals(account.getState()) || AccountStateEnum.PROMISE_TO_PAY.equals(account.getState())  
						|| AccountStateEnum.NON_PAYMENT_WARN.equals(account.getState()))
				{
					String billNumber = "";
					String expDate = "";
					String cardNumber = "";
					String paymentType = DIRECT_DEBIT_METHOD_CRDIT;
					Date invoiceDueDate = null; 
					double amount = BigDecimal.valueOf(topUpSchedule.getAmount(), precision.getStoragePrecision()).setScale(precision.getDisplayPrecision(), RoundingMode.HALF_EVEN).doubleValue();
					String accountName = "";
					
					if (token != null)
					{
						
						if (topUpSchedule.getInvoiceId() != null)
						{
							billNumber = topUpSchedule.getInvoiceId();
						}
						if(token.getExpiryDate() != null)
						{
							expDate = token.getExpiryDate();
						}
						if(token.getMaskedCreditCardNumber() != null)
						{
							cardNumber = token.getMaskedCreditCardNumber();
						}
						if(topUpSchedule.getInvoiceDueDate() != null)
						{
							invoiceDueDate = topUpSchedule.getInvoiceDueDate();
						}
						if(account.getAccountName() != null)
						{
							accountName = account.getAccountName();
						}
						
						output.printf(LINE_FORMAT, 
								++lineCount, 
								paymentType, 
								topUpSchedule.getBan(), 
								billNumber, 
								bankCode, 
								amount, 
								invoiceDueDate, invoiceDueDate, invoiceDueDate, 
								cardNumber, 
								expDate, 
								"", 
								accountName);
						
						this.totalAmount = this.totalAmount + topUpSchedule.getAmount();
						
						if (LogSupport.isDebugEnabled(ctx))
			            {
			                final StringBuilder buf = new StringBuilder();
			                buf.append("Successfully inserted TopUp Schedule record to Admeris Direct Debit Outound file : PaymentType : [");
			                buf.append(paymentType);
			                buf.append("], Direct Debit Indicator : [");
			                buf.append("DD");
			                buf.append("], Customer Account Number : [");
			                buf.append(topUpSchedule.getBan());
			                buf.append("], Bill Number : [");
			                buf.append(billNumber);
			                buf.append("], Bank Code : [");
			                buf.append(bankCode);
			                buf.append("], Amount : [");
			                buf.append(amount);
			                buf.append("], Bill Due Date : [");
			                buf.append(invoiceDueDate);
			                buf.append("], Customer Account Name : [");
			                buf.append(accountName);
			                buf.append("]");
			                LogSupport.debug(ctx, this, buf.toString());
			            }
						
						try
						{
							topUpSchedule.setNextApplication(null);
							topUpSchedule.setAmount(0l);
							topUpSchedule.setInvoiceDueDate(null);
							topUpSchedule.setInvoiceId("");
							HomeSupportHelper.get(ctx).storeBean(ctx, topUpSchedule);
						}
						catch (HomeException e)
						{
							LogSupport.minor(ctx, this, "Fail to update Postpaid Credit Card Top Up Schedule, ID : [" + topUpSchedule.getId() + "], "
									+ " Account : [" + topUpSchedule.getBan() + "]", e); 
						}
					}
				}
				//In Arrears, In Collection, Deactivated are invalid states
				else
				{
					LogSupport.minor(ctx, this, "Account is not a valid state, BAN : [" + topUpSchedule.getBan() + "], State : [" + account.getState() + "],"
										+ ", Skipping Postpaid Credit Card Top Up Schedule, ID : [" + topUpSchedule.getId() + "]");
				}
			}
			else
			{
				LogSupport.minor(ctx, this, "Account for BAN : [" + topUpSchedule.getBan() + "], does not exists in the system.");
			}
		}
	}	

	
	private long getFileSequence(Context ctx)
	throws HomeException
	{
        IdentifierSequenceSupportHelper.get(ctx).ensureSequenceExists(
                ctx,
                IdentifierEnum.DIRECT_DEBIT_FILE_ID,
                0,
                99999l);

       return IdentifierSequenceSupportHelper.get(ctx).getNextIdentifier(
                ctx,
                IdentifierEnum.DIRECT_DEBIT_FILE_ID,
                null); 
	}
	
	
	
	String fileName = ""; 
	PrintWriter output = null; 
	long totalAmount = 0l; 
	long lineCount = 0l; 
	long fileID = 0l; 
	String bankCode = "";
	String outDirectory = ""; 
	String extension = ""; 
	String autoGeneratedFileName = "";
	

	private CurrencyPrecision precision_ = null;
	
	public static final String HEADER_FORMAT = "88%5s%05d%td/%tm/%tY%tH:%tM\n"; 
	public static final String TRIAL_FORMAT = "99%012d%012.2f";
	public static final String LINE_FORMAT = "%010d%2sDD%21s%16s%5s%012.2f%td/%tm/%tY%-20s%-10s%-50s%-150s\n";
	
	public static String DIRECT_DEBIT_METHOD_CRDIT = "83";
	
}
