/*
 * This code is a protected work and subject to domestic and international copyright
 * law(s). A complete listing of authors of this work is readily available. Additionally,
 * source code is, by its very nature, confidential information and inextricably contains
 * trade secrets and other information proprietary, valuable and sensitive to Redknee. No
 * unauthorized use, disclosure, manipulation or otherwise is permitted, and may only be
 * used in accordance with the terms of the license agreement entered into with Redknee
 * Inc. and/or its subsidiaries.
 * 
 * Copyright ï¿½ Redknee Inc. and its subsidiaries. All Rights Reserved.
 */
package com.trilogy.app.crm.move.processor.account.strategy;

import java.util.Collection;
import java.util.HashSet;

import com.trilogy.app.crm.bean.AgedDebt;
import com.trilogy.app.crm.bean.AgedDebtHome;
import com.trilogy.app.crm.bean.AgedDebtXDBHome;
import com.trilogy.app.crm.bean.AgedDebtXInfo;
import com.trilogy.app.crm.move.MoveException;
import com.trilogy.app.crm.move.MoveWarningException;
import com.trilogy.app.crm.move.processor.strategy.CopyMoveStrategy;
import com.trilogy.app.crm.move.processor.strategy.CopyMoveStrategyProxy;
import com.trilogy.app.crm.move.request.AccountMoveRequest;
import com.trilogy.framework.xhome.context.Context;
import com.trilogy.framework.xhome.elang.EQ;
import com.trilogy.framework.xhome.home.Home;
import com.trilogy.framework.xhome.home.HomeException;
import com.trilogy.framework.xhome.home.HomeProxy;
import com.trilogy.framework.xlog.log.LogSupport;

/**
 * This class will copy following business entities for old Account and create them for new account.
 * 1. Aged Debt
 * 
 * It doesn't remove the old entities.
 * @author sgaidhani
 * @since 9.5.1
 */
public class AccountAgedDebtCopyMoveStrategy<AMR extends AccountMoveRequest> extends CopyMoveStrategyProxy<AMR> 
{
	public static final String AGED_DEBT_OPERATION = "AgedDebt";
	
	public AccountAgedDebtCopyMoveStrategy(CopyMoveStrategy<AMR> delegate)
    {
        super(delegate);
    }
	
	@Override
	public void initialize(Context ctx, AMR request) {
		super.initialize(ctx, request);
	}

	@Override
	public void validate(Context ctx, AMR request) throws IllegalStateException {
		super.validate(ctx, request);
	}

	@Override
	public void createNewEntity(Context ctx, AMR request) throws MoveException 
	{
		
		//Move to next delegate.
        super.createNewEntity(ctx, request);
        
        final String  oldIdentifier = ((AccountMoveRequest) request).getOldAccount(ctx).getBAN();
        final String  newIdentifier = ((AccountMoveRequest) request).getNewAccount(ctx).getBAN();
        
        copyAccountAgedDebtRecords(ctx, request, oldIdentifier, newIdentifier);
	}

	@Override
	public void removeOldEntity(Context ctx, AMR request) throws MoveException {
		super.removeOldEntity(ctx, request);
	}
	
	private void copyAccountAgedDebtRecords(Context ctx, AMR request,
			final String oldIdentifier, final String newIdentifier) {
		
		Collection<MoveWarningException> warnings = new HashSet<MoveWarningException>();
		int size = 0;
		try
        {
			Home home = (Home) ctx.get(AgedDebtHome.class);
			if(home != null && home instanceof HomeProxy)
			{
				Home xdbHome = ((HomeProxy)home).findDecorator(AgedDebtXDBHome.class);
				if(xdbHome != null)
				{
					
					//First remove records generated by SQL trigger after Inovice Insertion.
					Collection<AgedDebt> triggerGeneratedData = xdbHome.select(ctx, new EQ(AgedDebtXInfo.BAN, newIdentifier));

					for (AgedDebt triggereGeneratedagedDebtRecord : triggerGeneratedData)
					{
						try
						{
							xdbHome.remove(ctx,triggereGeneratedagedDebtRecord);
						}
						catch (Exception e)
						{
							String warningMesssage = "Error occured while trying to remove an AgedDebt Record "
									+ "for BAN :'" + newIdentifier
									+ "' and debtDate '" + triggereGeneratedagedDebtRecord.getDebtDate() ;
							LogSupport.minor(ctx, this, warningMesssage, e);
							warnings.add(
									new MoveWarningException(request, warningMesssage, e));
						}
					}

					//Now, copy records from child.
					Collection<AgedDebt> data = xdbHome.select(ctx, new EQ(AgedDebtXInfo.BAN, oldIdentifier));

					for (AgedDebt agedDebtRecord : data)
					{
						size++;
						try
						{
							AgedDebt newAgedDebtRecord = (AgedDebt) agedDebtRecord.deepClone();
							newAgedDebtRecord.setBAN(newIdentifier);

							xdbHome.create(ctx,newAgedDebtRecord);
						}
						catch (Exception e)
						{
							String warningMesssage = "Error occured while trying to copy an AgedDebt Record "
									+ "for BAN :'" + oldIdentifier
									+ "' and debtDate '" + agedDebtRecord.getDebtDate() 
									+ " to new BAN :" + newIdentifier;
							LogSupport.minor(ctx, this, warningMesssage, e);
							warnings.add(
									new MoveWarningException(request, warningMesssage, e));
						}
					}
				}
			}
    
        }
        catch (HomeException e)
        {
        	String warningMesssage = "Error occured while trying to copy all AgedDebt Records for BAN : " + oldIdentifier
            		+ " to new BAN :" + newIdentifier;
        	LogSupport.minor(ctx, this, warningMesssage, e);
        	warnings.add(
                    new MoveWarningException(request,warningMesssage , e));
        }
		
		if(size == 0)
		{
			request.reportStatusMessages(ctx,AGED_DEBT_OPERATION + " "+ COPY_NOT_APPLICABLE);
		}
		else
		{
			if(warnings.size() > 0)
			{
				request.reportStatusMessages(ctx,AGED_DEBT_OPERATION + " "+ COPY_FAILED);
				for(MoveWarningException warning : warnings)
				{
					request.reportWarning(ctx, warning);
				}
			}
			else
			{
				request.reportStatusMessages(ctx,AGED_DEBT_OPERATION + " "+ COPY_SUCCESS);
			}
		}
	}
}
